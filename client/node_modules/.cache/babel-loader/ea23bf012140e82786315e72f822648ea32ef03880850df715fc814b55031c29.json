{"ast":null,"code":"import axios from'axios';// Auto-detect the backend URL based on the current hostname\nconst getApiUrl=()=>{const customUrl=process.env.REACT_APP_API_URL;if(customUrl){return customUrl;}// If no custom URL is set, use the same hostname as the frontend\nconst protocol=window.location.protocol;const hostname=window.location.hostname;return\"\".concat(protocol,\"//\").concat(hostname,\":5000\");};const API_URL=getApiUrl();const api=axios.create({baseURL:\"\".concat(API_URL,\"/api\"),timeout:10000});// Request interceptor to add auth token\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>{return Promise.reject(error);});// Response interceptor for error handling\napi.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){// Token expired or invalid - just remove token, don't redirect\n// Let the auth context handle the redirect properly\nlocalStorage.removeItem('token');}return Promise.reject(error);});export default api;","map":{"version":3,"names":["axios","getApiUrl","customUrl","process","env","REACT_APP_API_URL","protocol","window","location","hostname","concat","API_URL","api","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","_error$response","status","removeItem"],"sources":["/workspace/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Auto-detect the backend URL based on the current hostname\nconst getApiUrl = () => {\n  const customUrl = process.env.REACT_APP_API_URL;\n  if (customUrl) {\n    return customUrl;\n  }\n  \n  // If no custom URL is set, use the same hostname as the frontend\n  const protocol = window.location.protocol;\n  const hostname = window.location.hostname;\n  return `${protocol}//${hostname}:5000`;\n};\n\nconst API_URL = getApiUrl();\n\nconst api = axios.create({\n  baseURL: `${API_URL}/api`,\n  timeout: 10000,\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Token expired or invalid - just remove token, don't redirect\n      // Let the auth context handle the redirect properly\n      localStorage.removeItem('token');\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default api;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB;AACA,KAAM,CAAAC,SAAS,CAAGA,CAAA,GAAM,CACtB,KAAM,CAAAC,SAAS,CAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,CAC/C,GAAIH,SAAS,CAAE,CACb,MAAO,CAAAA,SAAS,CAClB,CAEA;AACA,KAAM,CAAAI,QAAQ,CAAGC,MAAM,CAACC,QAAQ,CAACF,QAAQ,CACzC,KAAM,CAAAG,QAAQ,CAAGF,MAAM,CAACC,QAAQ,CAACC,QAAQ,CACzC,SAAAC,MAAA,CAAUJ,QAAQ,OAAAI,MAAA,CAAKD,QAAQ,UACjC,CAAC,CAED,KAAM,CAAAE,OAAO,CAAGV,SAAS,CAAC,CAAC,CAE3B,KAAM,CAAAW,GAAG,CAAGZ,KAAK,CAACa,MAAM,CAAC,CACvBC,OAAO,IAAAJ,MAAA,CAAKC,OAAO,QAAM,CACzBI,OAAO,CAAE,KACX,CAAC,CAAC,CAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,EAAK,CACV,KAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAC3C,GAAIF,KAAK,CAAE,CACTD,MAAM,CAACI,OAAO,CAACC,aAAa,WAAAd,MAAA,CAAaU,KAAK,CAAE,CAClD,CACA,MAAO,CAAAD,MAAM,CACf,CAAC,CACAM,KAAK,EAAK,CACT,MAAO,CAAAC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAC9B,CACF,CAAC,CAED;AACAb,GAAG,CAACI,YAAY,CAACY,QAAQ,CAACV,GAAG,CAC1BU,QAAQ,EAAKA,QAAQ,CACrBH,KAAK,EAAK,KAAAI,eAAA,CACT,GAAI,EAAAA,eAAA,CAAAJ,KAAK,CAACG,QAAQ,UAAAC,eAAA,iBAAdA,eAAA,CAAgBC,MAAM,IAAK,GAAG,CAAE,CAClC;AACA;AACAT,YAAY,CAACU,UAAU,CAAC,OAAO,CAAC,CAClC,CACA,MAAO,CAAAL,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAC9B,CACF,CAAC,CAED,cAAe,CAAAb,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}